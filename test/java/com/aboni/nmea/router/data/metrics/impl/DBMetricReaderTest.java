package com.aboni.nmea.router.data.metrics.impl;

import com.aboni.log.ConsoleLog;
import com.aboni.nmea.NMEAMessagesModule;
import com.aboni.nmea.router.NMEARouterModule;
import com.aboni.nmea.router.data.DataManagementException;
import com.aboni.nmea.router.data.QueryByDate;
import com.aboni.nmea.router.data.Sample;
import com.aboni.nmea.router.utils.ThingsFactory;
import com.aboni.nmea.router.utils.db.DBHelper;
import com.google.inject.Guice;
import com.google.inject.Injector;
import junit.framework.TestCase;
import org.junit.Test;

import java.time.Instant;

public class DBMetricReaderTest extends TestCase {

    private static final String[] TEST_DATA = new String[] {
            "TW_,2022-12-11T09:47:41Z,3.70119318976867,6.06237756152752,7.68432315067958",
            "TW_,2022-12-11T10:17:53Z,5.20676816778126,7.42112378859905,8.93073855906342",
            "TWD,2022-12-11T10:17:53Z,5.9611987131259,27.8925363598443,41.2134175152718",
            "TW_,2022-12-11T10:21:35Z,7.64257036315676,7.64257051491319,7.64257061608414",
            "TWD,2022-12-11T10:21:35Z,30.4899125626393,30.4899125626393,30.4899125626393",
            "TW_,2022-12-11T10:25:17Z,4.71002954806347,7.39311582529763,9.5172978545664",
            "TWD,2022-12-11T10:25:17Z,2.98667622326087,38.5737372394769,54.9118671839451",
            "TW_,2022-12-11T10:26:17Z,7.30947659380896,8.68674933599647,10.3368674305479",
            "TWD,2022-12-11T10:26:17Z,33.3150723405701,39.4866473807363,51.3758969111467",
            "TW_,2022-12-11T10:27:17Z,6.09764122885121,7.42020396943603,8.86130521799397",
            "TWD,2022-12-11T10:27:17Z,24.6399115420807,34.9831433790434,47.4727045408023",
            "TW_,2022-12-11T10:28:17Z,4.33469741116671,6.49975910319581,8.32620706618507",
            "TW_,2022-12-11T10:28:17Z,4.33469741116671,6.49975910319581,8.32620706618507",
            "TWD,2022-12-11T10:28:17Z,17.8514745439803,34.3973455633385,51.75564013401",
            "TW_,2022-12-11T10:44:17Z,6.85211634556098,6.85211634556098,6.85211634556098",
            "TWD,2022-12-11T10:44:17Z,44.3087155270402,44.3087155270402,44.3087155270402",
            "TW_,2022-12-11T10:58:12Z,3.81486715189922,5.59718956980796,7.03924573901394",
            "TWD,2022-12-11T10:58:12Z,12.4575004538576,30.4454422194505,43.4062074914265",
            "TW_,2022-12-11T10:59:12Z,3.79471932649438,5.55935429068984,6.51950230485178",
            "TWD,2022-12-11T10:59:12Z,21.0827370255121,33.4056373247869,61.2157781382012",
            "TW_,2022-12-11T11:06:52Z,6.09281111411831,6.09281111411831,6.09281111411831",
            "TWD,2022-12-11T11:06:52Z,27.4567174533269,27.4567174533269,27.4567174533269",
            "TW_,2022-12-11T11:14:25Z,3.51814995865304,5.89479284680819,8.44758538625496",
            "TWD,2022-12-11T11:14:25Z,2.22959653463749,47.2810635814228,96.0703369206262",
            "TW_,2022-12-11T11:50:59Z,1.07933469587639,4.08684596123779,8.49252116614007",
            "TWD,2022-12-11T11:50:59Z,12.0358739234703,48.8472448928439,211.75314110812",
            "TW_,2022-12-11T11:51:59Z,2.62689736150719,3.3462628407376,4.71228895996559",
            "TWD,2022-12-11T11:51:59Z,25.2197497258603,53.2684001476328,89.3621220865268",
            "TW_,2022-12-11T11:52:59Z,2.60557373944894,3.50421178737603,5.16323760132304",
            "TWD,2022-12-11T11:52:59Z,35.9163454203688,67.8178493095987,117.94722409507",
            "TW_,2022-12-11T11:53:59Z,2.81733831807716,4.3384008187545,6.3876003112298",
            "TWD,2022-12-11T11:53:59Z,52.6819065734513,79.4371809793892,110.324962519992",
            "TW_,2022-12-11T11:54:59Z,3.12705724062381,3.93832533632019,5.0898896021206",
            "TWD,2022-12-11T11:54:59Z,53.0294018582795,80.8271808696514,135.62024808233",
            "TW_,2022-12-11T11:55:59Z,3.94919250778415,4.69666799282818,5.67937320645835",
            "TWD,2022-12-11T11:55:59Z,57.1694313004155,81.6231434673778,120.963729223699",
            "TW_,2022-12-11T11:56:59Z,3.25016840254273,4.03178071703653,4.86251348700495",
            "TWD,2022-12-11T11:56:59Z,42.7333905745269,79.8360102665385,111.506381081528",
            "TW_,2022-12-11T11:57:59Z,2.15882869899047,3.49429674950279,4.84652938752994",
            "TWD,2022-12-11T11:57:59Z,38.3111211813066,82.1558179385154,137.482367904358",
            "TW_,2022-12-11T11:58:59Z,2.35355803714174,3.18085691854759,3.92884449061067",
            "TWD,2022-12-11T11:58:59Z,39.9153048422411,83.7043829673908,139.241110116873",
            "TW_,2022-12-11T11:59:59Z,2.22000857002799,3.70269008096731,4.39319453830513",
            "TWD,2022-12-11T11:59:59Z,66.2659190666057,85.5870010732038,118.849062444174",
            "TW_,2022-12-11T12:00:59Z,3.2489676884517,3.70668730832754,4.2191009491153",
            "TWD,2022-12-11T12:00:59Z,51.0831169837419,77.254412570284,101.64917202722",
            "TW_,2022-12-11T12:01:59Z,2.63722171963445,3.05317552695212,3.71289172924346",
            "TWD,2022-12-11T12:01:59Z,47.7123449326994,81.8029926831437,116.718504169076",
            "TW_,2022-12-11T12:02:59Z,2.13957491202702,2.74893266961421,3.69421705997238",
            "TWD,2022-12-11T12:02:59Z,49.2845183730037,75.1911183895287,126.842604394884",
            "TW_,2022-12-11T12:03:59Z,2.40467228985744,3.39877014958091,4.54158883567792",
            "TWD,2022-12-11T12:03:59Z,31.1359060708165,66.4339094810019,128.977082824595",
            "TW_,2022-12-11T12:04:59Z,2.84786262084853,3.74545555571273,4.96613565002243",
            "TWD,2022-12-11T12:04:59Z,36.9904090089748,67.9054528974213,101.588038418612",
            "TW_,2022-12-11T12:05:59Z,3.80982997299725,4.59022109962488,5.45438478233009",
            "TWD,2022-12-11T12:05:59Z,59.492514035111,81.8039552535214,104.984488458947",
            "TW_,2022-12-11T12:06:59Z,2.86043160576135,3.9172127448364,4.90490592918064",
            "TWD,2022-12-11T12:06:59Z,35.983250968307,79.3391087037407,130.017946076566",
            "TW_,2022-12-11T12:07:59Z,2.30996363162838,3.42011502853493,4.49274201280325",
            "TWD,2022-12-11T12:07:59Z,47.2964857444175,78.8105708690701,131.701784548881",
            "TW_,2022-12-11T12:08:59Z,2.50298793929389,3.17817070868738,4.39865803228938",
            "TWD,2022-12-11T12:08:59Z,47.1324319483688,92.9243837052285,138.245598096131",
            "TW_,2022-12-11T12:09:59Z,3.5413212492309,4.38058150977995,5.45924157380117",
            "TWD,2022-12-11T12:09:59Z,75.5022314704233,100.514731824555,138.125626412299",
            "TW_,2022-12-11T12:10:59Z,2.17941471073913,3.23369956522847,4.36310162764925",
            "TWD,2022-12-11T12:10:59Z,67.9175988103694,112.471576034159,165.116811276468",
            "TW_,2022-12-11T12:11:59Z,2.6075104250143,3.94029869037762,6.0473712306709",
            "TWD,2022-12-11T12:11:59Z,72.5130584705508,113.247045431543,132.634799611773",
            "TW_,2022-12-11T12:12:59Z,2.0459707241174,3.4153766034924,5.18985353323885",
            "TWD,2022-12-11T12:12:59Z,63.5528186728885,105.775756152775,168.872349426527",
            "TW_,2022-12-11T12:13:59Z,1.40000023834295,3.46067332057388,5.47597178287462"
    };

    private DBHelper helper;

    public void setUp() throws Exception {
        super.setUp();
        Injector injector = Guice.createInjector(new NMEARouterModule(), new NMEAMessagesModule());
        ThingsFactory.setInjector(injector);
        MetricTestTableManager.setUp();
        MetricTestTableManager.loadTrackCSV(TEST_DATA);
        helper = new DBHelper(ConsoleLog.getLogger(), true);
        count = 0;
        ref = -1;
    }

    public void tearDown() throws Exception {
        MetricTestTableManager.tearDown();
        helper.close();
    }

    private int count = 0;
    private int ref = -1;
    @Test
    public void testLoadWindSpeed() throws DataManagementException {
        Instant d0 = Instant.parse("2022-12-11T10:26:17Z");
        Instant d1 = Instant.parse("2022-12-11T12:06:59Z");
        new DBMetricReader(ConsoleLog.getLogger(), MetricTestTableManager.METRIC_TABLE_NAME).readData(new QueryByDate(d0, d1), "TW_", (Sample sample) -> {
            count++;
            ref = getTestData("TW_", d0, d1, ref);
            assertNotSame(-1, ref);
            assertEquals(getTimestamp(ref), sample.getInstant());
            assertEquals(getType(ref), sample.getTag());
            ref++;
        });
        assertEquals(26, count);
    }

    private static Instant getTimestamp(int i) {
        return Instant.parse(TEST_DATA[i].split(",")[1]);
    }

    private static String getType(int i) {
        return TEST_DATA[i].split(",")[0];
    }

    private int getTestData(String tag, Instant d0, Instant d1, int startFrom) {
        if (startFrom<0) startFrom = 0;
        for (int i = startFrom; i<TEST_DATA.length; i++) {
            Instant d = getTimestamp(i);
            if (TEST_DATA[i].startsWith(tag) && d.toEpochMilli()>=d0.toEpochMilli() && d.toEpochMilli()<=d1.toEpochMilli()) return i;
        }
        return -1;
    }
}