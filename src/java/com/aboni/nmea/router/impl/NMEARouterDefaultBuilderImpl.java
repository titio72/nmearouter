/*(C) 2020, Andrea BoniThis file is part of NMEARouter.NMEARouter is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.NMEARouter is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with NMEARouter.  If not, see <http://www.gnu.org/licenses/>.*/package com.aboni.nmea.router.impl;import com.aboni.nmea.router.*;import com.aboni.nmea.router.agent.*;import com.aboni.nmea.router.conf.AgentConfJSON;import com.aboni.nmea.router.conf.ConfJSON;import com.aboni.nmea.router.conf.MalformedConfigurationException;import com.aboni.nmea.router.filters.JSONFilterParser;import com.aboni.nmea.router.processors.NMEASourcePriorityProcessor;import javax.inject.Inject;import java.util.HashSet;import java.util.List;import java.util.Properties;import java.util.Set;import java.util.logging.Level;import java.util.logging.Logger;public class NMEARouterDefaultBuilderImpl implements NMEARouterBuilder {    private static final boolean ENABLE_GPS_TIME = true;    private static final boolean ENABLE_AP = false;    private final AgentPersistentStatusManager agentStatusManager;    private final NMEAAgentBuilderJson builder;    private final TimestampProvider timestampProvider;    private NMEARouter theRouter;    @Inject    public NMEARouterDefaultBuilderImpl(AgentPersistentStatusManager agentStatusManager, NMEAAgentBuilderJson builder,                                        JSONFilterParser filterParser, TimestampProvider tp) {        if (agentStatusManager==null) throw new IllegalArgumentException("Agent status manager is null");        if (tp==null) throw new IllegalArgumentException("Timestamp provider is null");        if (filterParser ==null) throw new IllegalArgumentException("Agent filter serializer is null");        if (builder==null) throw new IllegalArgumentException("Agent builder is null");        this.agentStatusManager = agentStatusManager;        this.builder = builder;        this.timestampProvider = tp;    }    @Override    public void init(NMEARouter router, Properties unused) {        try {            theRouter = router;            buildRouter();        } catch (MalformedConfigurationException e) {            Logger.getGlobal().log(Level.SEVERE, "Error", e);        }    }    private void buildRouter() throws MalformedConfigurationException {        NMEARouter r = theRouter;        List<String> gpsPriority;        ConfJSON cJ;        try {            cJ = new ConfJSON();            gpsPriority = cJ.getGPSPriority();        } catch (Exception e) {            throw new MalformedConfigurationException(e);        }        configureGPSPriority(gpsPriority, r);        if (ENABLE_GPS_TIME) buildBuiltInAgent(r, BuiltInAgents.GPS_TIME_SYNC, true);        if (ENABLE_AP) buildBuiltInAgent(r, BuiltInAgents.EVO_AUTO_PILOT, true);        buildBuiltInAgent(r, BuiltInAgents.FILE_DUMPER, false);        buildBuiltInAgent(r, BuiltInAgents.POWER_LED, true);        buildBuiltInAgent(r, BuiltInAgents.FAN_MANAGER, true);        buildBuiltInAgent(r, BuiltInAgents.DEPTH_STATS, true);        buildBuiltInAgent(r, BuiltInAgents.ENGINE_DETECTOR, true);        buildBuiltInAgent(r, BuiltInAgents.WEB_UI, true);        buildAgents(cJ, r);    }    private void buildAgents(ConfJSON conf, NMEARouter r) throws MalformedConfigurationException {        Set<NMEAAgent> toActivate = new HashSet<>();        for (AgentConfJSON a : conf.getAgents()) {            NMEAAgent agent = builder.createAgent(a);            if (agent != null) {                r.addAgent(agent);                AgentPersistentStatus status = loadPersistentStatus(agent);                if (status.getStatus().equals(AgentActivationMode.AUTO)) toActivate.add(agent);            }        }        for (NMEAAgent a : toActivate) {            a.start();        }    }    private AgentPersistentStatus loadPersistentStatus(NMEAAgent agent) {        AgentPersistentStatus status = agentStatusManager.getPersistentStatus(agent.getName());        String agName = agent.getName();        if (status == null) {            agentStatusManager.setStartMode(agName, AgentActivationMode.MANUAL);            if (agent.getSource() != null) agentStatusManager.setSourceFilter(agName, agent.getSource().getFilter());            if (agent.getTarget() != null) agentStatusManager.setTargetFilter(agName, agent.getTarget().getFilter());        } else {            if (agent.getSource() != null) agent.getSource().setFilter(status.getSourceFilter());            if (agent.getTarget() != null) agent.getTarget().setFilter(status.getTargetFilter());        }        return agentStatusManager.getPersistentStatus(agName);    }    private void configureGPSPriority(List<String> gpsPriority, NMEARouter r) {        if (gpsPriority != null && !gpsPriority.isEmpty()) {            NMEASourcePriorityProcessor processor = new NMEASourcePriorityProcessor(timestampProvider);            processor.addAllGPS();            for (int i = 0; i < gpsPriority.size(); i++) {                processor.setPriority(gpsPriority.get(i), gpsPriority.size() - i /* first has the highest priority */);            }            r.addProcessor(processor);        }    }    private void buildBuiltInAgent(NMEARouter r, BuiltInAgents a, boolean doStart) {        NMEAAgent agent = builder.createAgent(a);        if (agent != null) {            r.addAgent(agent);            if (doStart) agent.start();        }    }}