package com.aboni.nmea.router.services;import com.aboni.utils.ServerLog;import com.aboni.utils.db.DBHelper;import org.json.JSONObject;import java.sql.*;import java.text.DateFormat;public class TripInfoService extends JSONWebService {    private static final double SPEED_THRESHOLD = 0.3;    private static final String SQL_DESC = "select description from trip where id=?";    private static final String SQL_MAX_MIN = "select min(TS), max(TS) from track where tripid=?";    private static final String SQL_SAIL_STATS = "select sum(dist), max(speed), max(maxSpeed), sum(dTime) from track " +            "where tripid=? and anchor=0 and speed>" + SPEED_THRESHOLD;    public TripInfoService() {        // nothing to initialize    }    private class TripStats {        String name = "";        double dist = 0;        double maxSpeed30 = 0;        double maxSpeed = 0;        Timestamp start = null;        Timestamp end = null;        long sailTime = 0;    }    @Override    public JSONObject getResult(ServiceConfig config, DBHelper db) {        TripStats stats = new TripStats();        JSONObject res = new JSONObject();        int trip = config.getInteger("trip", -1);        if (trip!=-1) {            try {                readName(db, stats, trip);                readStartEnd(db, stats, trip);                readStats(db, stats, trip);                res.put("id", trip);                res.put("name", stats.name);                res.put("dist", stats.dist);                res.put("maxspeed30", stats.maxSpeed30);                res.put("maxspeed", stats.maxSpeed);                res.put("sailtime", stats.sailTime);                if (stats.start!=null && stats.end!=null) {                    res.put("start", DateFormat.getDateInstance(DateFormat.SHORT).format(stats.start));                    res.put("end", DateFormat.getDateInstance(DateFormat.SHORT).format(stats.end));                    res.put("duration", (stats.end.getTime() - stats.start.getTime()) / 1000);                    res.put("avgspeed", (stats.sailTime!=0)?(stats.dist / (stats.sailTime/60.0/60.0)):0.0);                }            } catch (SQLException e) {                ServerLog.getLogger().Error("Error reading trip stats", e);                res = new JSONObject();                res.put("Error", "Cannot retrieve trips status - check the logs for errors");            }        } else {            res.put("Error", "Invalid trip id");        }        return res;    }    private void readStats(DBHelper db, TripStats stats, int trip) throws SQLException {        try (PreparedStatement stm1 = db.getConnection().prepareStatement(SQL_SAIL_STATS)) {            stm1.setInt(1, trip);            try (ResultSet rs = stm1.executeQuery()) {                if (rs.next()) {                    stats.dist = rs.getDouble(1);                    stats.maxSpeed30 = rs.getDouble(2);                    stats.maxSpeed = rs.getDouble(3);                    stats.sailTime = rs.getLong(4);                }            }        }    }    private void readStartEnd(DBHelper db, TripStats stats, int trip) throws SQLException {        try (PreparedStatement stm = db.getConnection().prepareStatement(SQL_MAX_MIN)) {            stm.setInt(1, trip);            try (ResultSet rs = stm.executeQuery()) {                if (rs.next()) {                    stats.start = rs.getTimestamp(1);                    stats.end = rs.getTimestamp(2);                }            }        }    }    private void readName(DBHelper db, TripStats stats, int trip) throws SQLException {        try (PreparedStatement stmDesc = db.getConnection().prepareStatement(SQL_DESC)) {            stmDesc.setInt(1, trip);            try (ResultSet rs = stmDesc.executeQuery()) {                if (rs.next()) {                    stats.name = rs.getString(1);                }            }        }    }}