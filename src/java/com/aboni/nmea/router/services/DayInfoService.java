package com.aboni.nmea.router.services;import com.aboni.utils.Pair;import com.aboni.utils.ServerLog;import com.aboni.utils.db.DBHelper;import org.json.JSONObject;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Timestamp;import java.text.DateFormat;import java.util.Calendar;import java.util.LinkedList;import java.util.List;public class DayInfoService extends JSONWebService {    private static final String DATE_FORMAT = "yyyyMMdd";    private static final String SQL_DAY  = "select TS, dist, speed from track where TS>=? and TS<? and anchor=0";    private static final String SQL_DAY_STATS = "select sum(dist), max(speed), max(maxSpeed), sum(dTime) from track where TS>=? and TS<? and anchor=0";    public DayInfoService() {        super();        setLoader(this::getResult);    }    static class MovingAverageMax {        private double d;        private String tag;        private List<Pair<Long, Double>> sss = new LinkedList<>();        private double distance = 0;        private long t0Max = 0;        private long t1Max = 0;        private double speedMax = 0.0;        MovingAverageMax(double distance, String tag) {            d = distance;            this.tag = tag;        }        void addSample(Pair<Long, Double> p) {            sss.add(p);            distance += p.second;            if (distance>d) {                // pull the first item from the rolling window                Pair<Long, Double> p0 = sss.get(0);                while (distance>d) {                    distance -= p0.second;                    sss.remove(0);                    p0 = sss.get(0);                }                long dT = p.first - p0.first;                double speed = distance / ((double)dT / 3600000d);                if (speed > speedMax) {                    t0Max = p0.first;                    t1Max = p.first;                    speedMax = speed;                }            }        }        double getMaxSpeed() {            return speedMax;        }        long getMaxSpeedT0() {            return t0Max;        }        long getMaxSpeedT1() {            return t1Max;        }        void fillRes(JSONObject result) {            if (getMaxSpeed()>0.0) {                result.put("t0_" + tag, getMaxSpeedT0());                result.put("t1_" + tag, getMaxSpeedT1());                result.put("speed_" + tag, getMaxSpeed());            }        }    }    private void pippo(DBHelper db, ServiceConfig config, JSONObject result) {        Calendar c = Calendar.getInstance();        c.setTimeInMillis(c.getTimeInMillis() - (c.getTimeInMillis() % (24 * 60 * 60 * 1000)));        Calendar cFrom = config.getParamAsCalendar(config, "from", c, DATE_FORMAT);        c.setTimeInMillis(c.getTimeInMillis() + 86400000L);        Calendar cTo = config.getParamAsCalendar(config, "to", c, DATE_FORMAT);        try (PreparedStatement stm1 = db.getConnection().prepareStatement(SQL_DAY)) {            stm1.setTimestamp(1, new Timestamp(cFrom.getTimeInMillis()));            stm1.setTimestamp(2, new Timestamp(cTo.getTimeInMillis() + 86400000L));            MovingAverageMax[] mAvgMaxs = new MovingAverageMax[] {                    new MovingAverageMax(1.0, "1NM"),                    new MovingAverageMax(5.0, "5NM"),                    new MovingAverageMax(10.0, "10NM")};            try (ResultSet rs1 = stm1.executeQuery()) {                while (rs1.next()) {                    Pair<Long, Double> p = new Pair<>(rs1.getTimestamp(1).getTime(),                            rs1.getDouble(2));                    for (MovingAverageMax m: mAvgMaxs) m.addSample(p);                }            }            for (MovingAverageMax m: mAvgMaxs) m.fillRes(result);        }  catch (Exception e) {            ServerLog.getLogger().error("Error reading daily stats", e);        }    }    private JSONObject getResult(ServiceConfig config) {        try (DBHelper db = new DBHelper(true)) {            Calendar c = Calendar.getInstance();            c.setTimeInMillis(c.getTimeInMillis() - (c.getTimeInMillis() % (24 * 60 * 60 * 1000)));            Calendar cFrom = config.getParamAsCalendar(config, "from", c, DATE_FORMAT);            c.setTimeInMillis(c.getTimeInMillis() + 86400000L);            Calendar cTo = config.getParamAsCalendar(config, "to", c, DATE_FORMAT);            JSONObject res = new JSONObject();            res.put("id", 0);            res.put("name", "");            res.put("start", DateFormat.getDateInstance(DateFormat.SHORT).format(cFrom.getTime()));            res.put("end", DateFormat.getDateInstance(DateFormat.SHORT).format(cTo.getTime()));            readTripStats(db, cFrom, cTo, res);            pippo(db, config, res);            return res;        } catch (ClassNotFoundException e) {            ServerLog.getLogger().error("Error reading daily stats", e);            return getError("Error " + e.getMessage());        }    }    private void readTripStats(DBHelper db, Calendar cFrom, Calendar cTo, JSONObject res) {        try (PreparedStatement stm1 = db.getConnection().prepareStatement(SQL_DAY_STATS)) {            stm1.setTimestamp(1, new Timestamp(cFrom.getTimeInMillis()));            stm1.setTimestamp(2, new Timestamp(cTo.getTimeInMillis() + 86400000L));            try (ResultSet rs1 = stm1.executeQuery()) {                if (rs1.next()) {                    double dist = rs1.getDouble(1);                    double maxSpeed30 = rs1.getDouble(2);                    double maxSpeed = rs1.getDouble(3);                    long sailTime = rs1.getLong(4);                    res.put("dist", dist);                    res.put("maxspeed30", maxSpeed30);                    res.put("maxspeed", maxSpeed);                    res.put("sailtime", sailTime);                    res.put("avgspeed", (sailTime != 0) ? (dist / (sailTime / 60.0 / 60.0)) : 0.0);                }            }        } catch (SQLException e) {            onSQLError(res, e);        }    }    private void onSQLError(JSONObject res, SQLException e) {        ServerLog.getLogger().error("Error reading trip stats", e);        res.put("Error", "Cannot retrieve trips status - check the logs for errors");    }}