package com.aboni.nmea.router.services;import com.aboni.utils.ServerLog;import com.aboni.utils.db.DBHelper;import org.json.JSONObject;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Timestamp;import java.text.DateFormat;import java.util.Calendar;public class DayInfoService extends JSONWebService {    public DayInfoService() {    }    private static final double SPEED_THRESHOLD = 0.3;    private static final String sql1 = "select sum(dist), max(speed), max(maxSpeed), sum(dTime) from track where TS>=? and TS<? and anchor=0 and speed>" + SPEED_THRESHOLD;    @Override    public JSONObject getResult(ServiceConfig config, DBHelper db) {        double dist = 0;        double maxSpeed30 = 0;        double maxSpeed = 0;        long sailTime = 0;        JSONObject res = new JSONObject();        Calendar c = Calendar.getInstance();        c.setTimeInMillis( c.getTimeInMillis() - (c.getTimeInMillis()%(24*60*60*1000)) );        Calendar cFrom = config.getParamAsCalendar(config, "from", c, "yyyyMMdd");        c.setTimeInMillis(c.getTimeInMillis()+86400000L);        Calendar cTo = config.getParamAsCalendar(config, "to", c, "yyyyMMdd");        try {            PreparedStatement stm1 = db.getConnection().prepareStatement(sql1);            stm1.setTimestamp(1, new Timestamp(cFrom.getTimeInMillis()));            stm1.setTimestamp(2, new Timestamp(cTo.getTimeInMillis() + 86400000L));            ResultSet rs1 = stm1.executeQuery();            if (rs1.next()) {                dist = rs1.getDouble(1);                maxSpeed30 = rs1.getDouble(2);                maxSpeed = rs1.getDouble(3);                sailTime = rs1.getLong(4);            }            stm1.close();            res.put("id", 0);            res.put("name", "");            res.put("dist", dist);            res.put("maxspeed30", maxSpeed30);            res.put("maxspeed", maxSpeed);            res.put("sailtime", sailTime);            res.put("avgspeed", (sailTime!=0)?(dist / (sailTime/60.0/60.0)):0.0);            res.put("start", DateFormat.getDateInstance(DateFormat.SHORT).format(cFrom.getTime()));            res.put("end", DateFormat.getDateInstance(DateFormat.SHORT).format(cTo.getTime()));        } catch (SQLException e) {            ServerLog.getLogger().Error("Error reading trip stats", e);            res = new JSONObject();            res.put("Error", "Cannot retrieve trips status - check the logs for errors");        }        return res;    }}