package com.aboni.nmea.router.services;import com.aboni.utils.ServerLog;import com.aboni.utils.db.DBHelper;import org.json.JSONObject;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Timestamp;import java.text.DateFormat;import java.util.Calendar;public class DayInfoService extends JSONWebService {    private static final String SQL_DAY_STATS = "select sum(dist), max(speed), max(maxSpeed), sum(dTime) from track where TS>=? and TS<? and anchor=0";    public DayInfoService() {        super();        setLoader(this::getResult);    }    private JSONObject getResult(ServiceConfig config) {        try (DBHelper db = new DBHelper(true)) {            Calendar c = Calendar.getInstance();            c.setTimeInMillis(c.getTimeInMillis() - (c.getTimeInMillis() % (24 * 60 * 60 * 1000)));            Calendar cFrom = config.getParamAsCalendar(config, "from", c, "yyyyMMdd");            c.setTimeInMillis(c.getTimeInMillis() + 86400000L);            Calendar cTo = config.getParamAsCalendar(config, "to", c, "yyyyMMdd");            JSONObject res = new JSONObject();            res.put("id", 0);            res.put("name", "");            res.put("start", DateFormat.getDateInstance(DateFormat.SHORT).format(cFrom.getTime()));            res.put("end", DateFormat.getDateInstance(DateFormat.SHORT).format(cTo.getTime()));            readTripStats(db, cFrom, cTo, res);            return res;        } catch (ClassNotFoundException e) {            ServerLog.getLogger().error("Error reading trip stats", e);            return getError("Error " + e.getMessage());        }    }    private void readTripStats(DBHelper db, Calendar cFrom, Calendar cTo, JSONObject res) {        try (PreparedStatement stm1 = db.getConnection().prepareStatement(SQL_DAY_STATS)) {            stm1.setTimestamp(1, new Timestamp(cFrom.getTimeInMillis()));            stm1.setTimestamp(2, new Timestamp(cTo.getTimeInMillis() + 86400000L));            try (ResultSet rs1 = stm1.executeQuery()) {                if (rs1.next()) {                    double dist = rs1.getDouble(1);                    double maxSpeed30 = rs1.getDouble(2);                    double maxSpeed = rs1.getDouble(3);                    long sailTime = rs1.getLong(4);                    res.put("dist", dist);                    res.put("maxspeed30", maxSpeed30);                    res.put("maxspeed", maxSpeed);                    res.put("sailtime", sailTime);                    res.put("avgspeed", (sailTime != 0) ? (dist / (sailTime / 60.0 / 60.0)) : 0.0);                }            }        } catch (SQLException e) {            onSQLError(res, e);        }    }    private void onSQLError(JSONObject res, SQLException e) {        ServerLog.getLogger().error("Error reading trip stats", e);        res.put("Error", "Cannot retrieve trips status - check the logs for errors");    }}